#!/usr/bin/env python3

from selenium.webdriver.firefox.options import Options as FirefoxOptions
from selenium.webdriver.firefox.service import Service
from selenium import webdriver                        
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.common.keys import Keys
import sys
import time
from os import path
from lxml import etree
from urllib.parse import urlparse

# check amount of passed arguments
if (len(sys.argv) != 2):
    print("usage: {} copyright".format(sys.argv[0]))
    print("Run 2 Google Dorks and extract URLs")
    sys.exit(1)

options = FirefoxOptions()

# headless mode
options.add_argument("--headless")

# certificate errors
options.add_argument("--ignore-ssl-errors=yes")
options.add_argument('--ignore-certificate-errors')

# user agent
options.set_preference("general.useragent.override", "Safari: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/605.1.3 (KHTML, like Gecko) Version/11.1 Safari/605.1.3")

# prevent creation of geckodriver.log
service = Service(log_output="/dev/null", executable_path="/usr/local/bin/geckodriver")
driver = webdriver.Firefox(options=options, service=service)

# 10 seconds default wait for element to be clickable
driver.implicitly_wait(4)

# will be ecluded in the second search
firstResultDomain = ""

# used to store alle results
allRootDomains = set()

"""FUNCTION
Search for the copyright and return list of domains

term = The search term for google
"""
def searchOnGoogle(term):
    url = "https://www.google.com"
    driver.get(url)
    time.sleep(2)
    
    # click accept cookie
    try:
        driver.find_elements(By.ID, "L2AGLb")
        WebDriverWait(driver,2).until(EC.element_to_be_clickable((By.ID, "L2AGLb"))).click()
        time.sleep(1)
    except Exception as e:
        pass
    
    # send keystrokes by getting element by id
    textField = WebDriverWait(driver,10).until(EC.element_to_be_clickable((By.CLASS_NAME, "gLFyf")))
    textField.send_keys(term)
    textField.send_keys(Keys.RETURN)
    
    # wait for page to load
    WebDriverWait(driver,10).until(EC.element_to_be_clickable((By.ID, "rso")))
    time.sleep(2)
    
    # send global keydown arrow
    actions = ActionChains(driver)
    actions.send_keys(Keys.END).perform()
    time.sleep(3)
    actions.send_keys(Keys.END).perform()
    time.sleep(3)
    
    sourceCode = driver.page_source
    tree = etree.HTML(sourceCode)
    
    # get result urls
    allHrefs = tree.xpath("//a/@href")
    
    ignoreDomains = ["youtube.com", "instagram.com", "twitter.com", "facebook.com", "xing.com", "linkedin.com", "wikipedia.org", "googleusercontent.com", "apple.com"]

    # flag used to identify first search result
    firstResultFoundFlag = "0"
    
    for href in allHrefs:
        # skipe all google urls
        if (href.startswith("https://") and not ".google." in href):
            resultLink = urlparse(href)
            domain = resultLink.netloc
            splitDomain = domain.split(".")
            rootDomain = splitDomain[-2] + "." + splitDomain[-1]
    
            # skipe known social media platforms
            if (not rootDomain in ignoreDomains):
                allRootDomains.add(rootDomain)
                if (firstResultFoundFlag == "0"):
                    firstResultDomain = rootDomain
                    firstResultFoundFlag = "1"

    return firstResultDomain 

copyRight = sys.argv[1]

# perform first search
firstResult = searchOnGoogle("\"" + copyRight + "\"")

# redo the search and exclude first resulting domain
searchKey = "\"" + copyRight + "\" -site:" + firstResult
searchOnGoogle(searchKey)

uniqDomains = sorted(allRootDomains)

# print final results
for d in uniqDomains:
    print(d)
    
driver.close()

