#!/usr/bin/env python3

from lxml import etree
from os import path
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.firefox.options import Options as FirefoxOptions
from selenium.webdriver.firefox.service import Service
import os
import random
import shutil
import string
import subprocess
import sys
import threading
import time

# check amount of passed arguments
if (len(sys.argv) != 2):
    print("usage: {} domain".format(sys.argv[0]))
    print("Visit completedns.com and extract nameserver history")
    sys.exit(1)

# create temporary directory
letters = string.ascii_lowercase
randStr = ""
for l in range(16):
    randStr = randStr + random.choice(letters)

tempDir = "/tmp/ns-history-" + randStr

if (not os.path.exists(tempDir)):
    os.makedirs(tempDir)

# selenium webdriver configuration
options = FirefoxOptions()

# headless mode
options.add_argument("--headless")

# certificate errors
options.add_argument("--ignore-ssl-errors=yes")
options.add_argument('--ignore-certificate-errors')

# redirect
options.set_preference("network.http.redirection-limit", 4)

# user agent
options.set_preference("general.useragent.override", "Safari: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/605.1.3 (KHTML, like Gecko) Version/11.1 Safari/605.1.3")

# prevent creation of geckodriver.log
service = Service(log_output="/dev/null", executable_path="/usr/local/bin/geckodriver")
driver = webdriver.Firefox(options=options, service=service)

# 10 seconds timeout
driver.set_page_load_timeout(10)

# 10 seconds default wait for element to be clickable
driver.implicitly_wait(10)

rootdomain = sys.argv[1]
url = "https://completedns.com/dns-history"
driver.get(url)
time.sleep(3)

# search for domain
textField = driver.find_elements(By.ID, "domain")
textField[0].send_keys(rootdomain)
textField[0].send_keys(Keys.RETURN)

time.sleep(3)

# used to collect all nameserver and resolve whois owner
allNameserver = []

# check if top level domain is supported
try:
    response = driver.find_elements(By.CLASS_NAME, "data")[0].text
    sourceCode = driver.page_source
    tree = etree.HTML(sourceCode)
    
    # retreive historical nameserver
    for element in tree.iterdescendants():
        if (element.tag == "div"):
            className = element.get("class")
    
            # print date
            if (className is not None and ("year" in className or "month-day" in className)):
                if (element.text is not None):
                    content = element.text.strip()
                    print(content, end=" ")
    
            # print nameserver
            if (className is not None and "col-md-6" in className):
                # only print class "col-md-6" if it contains <b>Nameservers</b>
                if (any(child.tag == "b" and child.text == "Nameservers" for child in element.iter())):
                    print("")
                    for child_element in element.xpath(".//text()"):
                        if (child_element.strip()):
                            content = child_element.strip()
                            if ("Nameservers" != content and content != ""):
                                print(content)
                                allNameserver.append(content)
                    print("")
    
    driver.close()

# use current nameserver instead
except:
    print("TLD of " + rootdomain + " not supported for nameserver history")
    print("Get current ns server:")
    os.system("dig +short NS " + rootdomain + " > " + tempDir + "/current-ns.txt")

    with open(tempDir + "/current-ns.txt", "r") as digFile:
        for nameserver in digFile:
            nameserver = nameserver.replace("\n","")
            nameserver = nameserver[:-1]
            allNameserver.append(nameserver)

# whois owner of nameserver
uniqNameserver = sorted(set(allNameserver))

# used to run whois command multi threaded
hostCommands = []
whoisCommands = []

# run up to 8 threads
class runThreadCommand(threading.Thread):
    def __init__(self, command):
        threading.Thread.__init__(self)
        self.command = command
 
    def run(self):
        os.system(self.command)

# construct bash command to retreive whois netname of each nameserver
for ns in uniqNameserver:
    hostCommand = "host " + ns + " | awk -F 'has address' '{print $2}' | sed 's/ //g' | head -n 1 > " + tempDir + "/" + ns + "-host.txt"
    hostCommands.append(hostCommand)

# check if host command return any result
if (not hostCommands):
    print("No nameserver found")
    exit(0)

# run all host commands
while hostCommands:
    if (threading.active_count() <= 8):
        randInd = random.randint(0,len(hostCommands)-1)
        currentThread = runThreadCommand(hostCommands[randInd])
        del(hostCommands[randInd])
        currentThread.start()

currentThread.join()
time.sleep(2)

for ns in uniqNameserver:
    hostFile = open(tempDir + "/" + ns + "-host.txt", "r")
    try:
        ipAddress = hostFile.readlines()[0].replace("\n","")
    except:
        ipAddress = ""
    hostFile.close()

    # only append resolvable nameserver
    if (len(ipAddress) != 0):
        whoisCommand = "whois " + ipAddress + " | grep -i 'netname' | head -n 1 | awk -F ' ' '{print $2}' > " + tempDir + "/" + ns + "-whois.txt"
        whoisCommands.append(whoisCommand)

# run all whois commands
while whoisCommands:
    if (threading.active_count() <= 8):
        randInd = random.randint(0,len(whoisCommands)-1)
        currentThread = runThreadCommand(whoisCommands[randInd])
        del(whoisCommands[randInd])
        currentThread.start()

currentThread.join()
time.sleep(2)

print("\n##### Whois of Nameserver:\n")
print("Nameserver ; Netname")

for ns in uniqNameserver:
    # no file exist if host nameserver return nxdomain
    try:
        whoisFile = open(tempDir + "/" + ns + "-whois.txt", "r")
        netname = whoisFile.readlines()[0]
        whoisFile.close()
        print(ns + " ; " + netname, end="")
    except:
        print(ns + " ; NXDOMAIN")

# remove temporary directory 
shutil.rmtree(tempDir)

