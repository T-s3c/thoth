#!/usr/bin/env python3

from lxml import etree
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.firefox.options import Options as FirefoxOptions
from selenium.webdriver.firefox.service import Service
import sys
import time

# check amount of passed arguments
if (len(sys.argv) != 2):
    print("usage: {} gid".format(sys.argv[0]))
    print("ID can either be Google Adsense (pub-X) or Google Analytics (ua-X)")
    print("Visit dnslytics.com and extract domains connected to google id")
    sys.exit(1)

gid = sys.argv[1].lower()

options = FirefoxOptions()

# headless mode
options.add_argument("--headless")

# certificate errors
options.add_argument("--ignore-ssl-errors=yes")
options.add_argument('--ignore-certificate-errors')

# user agent
options.set_preference("general.useragent.override", "Safari: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/605.1.3 (KHTML, like Gecko) Version/11.1 Safari/605.1.3")

# prevent creation of geckodriver.log
service = Service(log_output="/dev/null")
driver = webdriver.Firefox(options=options, service=service)

# 10 seconds timeout
driver.set_page_load_timeout(10)

# 10 seconds default wait for element to be clickable
driver.implicitly_wait(10)

# check id format
if ("ua-" in gid):
    url = "https://dnslytics.com/reverse-analytics"
elif ("pub-" in gid):
    url = "https://dnslytics.com/reverse-adsense"
else:
    print("Wrong format for gid!")
    exit(1)

driver.get(url)

time.sleep(2)

# find input field and input ga id
if ("ua-" in gid):
    inputField = driver.find_element(By.NAME, "reverseanalytics")
elif ("pub-" in gid):
    inputField = driver.find_element(By.NAME, "reverse-adsense")
inputField.send_keys(gid)

# click go 
submit_button = driver.find_element(By.XPATH, "//input[@value='Go']")
submit_button.click()

time.sleep(2)

# scroll to bottom
driver.execute_script("window.scrollTo(0, document.body.scrollHeight);")

sourceCode = driver.page_source
tree = etree.HTML(sourceCode)

# used to just print the first two <big> strings
printLastSeenFlag = 0

# print each <b> and <small>
for element in tree.iterdescendants():
    if (element.tag == "b"):
        if (element.text is not None):
            content = element.text.strip()
            
            # skip amount of domains
            if (not content.isdigit()):

                print(content)

                # print only once
                if (printLastSeenFlag == "1"):
                    print("Last seen: ", end="")
                    printLastSeenFlag = "0"

    elif (element.tag == "small"):
        if (element.text is not None):
            content = element.text.strip()

            if ("First seen " in content):
                print("First seen: ", end="")
                printLastSeenFlag = "1"

            # dont print prompt
            elif (not "Enter domain name " in content):
                print(content)

driver.close()

