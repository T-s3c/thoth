#!/usr/bin/env python3

from selenium import webdriver
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.firefox.options import Options as FirefoxOptions
from selenium.webdriver.firefox.service import Service
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.support.ui import WebDriverWait
import sys
import time
import urllib.parse

# check amount of passed arguments
if (len(sys.argv) != 2):
    print("usage: {} searchKey".format(sys.argv[0]))
    print("Run Google dork and browse 4 first pages, repeat with Duck Duck Go")
    sys.exit(1)

"""FUNCTION
Extract username from linkedIn URL

selObj = Selenium href object
"""
def extractEmplName(selObj):
    for url in urls:
        try:
            href = url.get_attribute("href")
        except Exception as e:
            print("Error while getting href: " + e)
            return
        
        if ("google." in href):
            continue
        
        if ("linkedin.com/in" in href):
            try:
                splittedHref = href.split(".linkedin.com/in/")
                cleanHref = splittedHref[1]
                cleanHref = cleanHref.replace("\n","")
                cleanHref = urllib.parse.unquote(cleanHref)
                splittedName = cleanHref.split("-")
                cleanEmplName = ""
        
                for nameChunk in splittedName:
                    if ("/" in nameChunk):
                        splNameChunk = nameChunk.split("/")
                        nameChunk = splNameChunk[0]
                    if (not any(chr.isdigit() for chr in nameChunk)):
                        cleanEmplName = cleanEmplName + " " + nameChunk
                    if (nameChunk[0] == "%"):
                        cleanEmplName = cleanEmplName + " " + nameChunk   
                allEmployees.append(cleanEmplName[1:])
        
            except Exception as e:
                print("Error: " + href + " -- " + e)


options = FirefoxOptions()
options.add_argument("--headless")
service = Service(log_path="/dev/null")
driver = webdriver.Firefox(options=options, service=service)

allEmployees = []

searchKey = 'intitle:"' + sys.argv[1]+ '" inurl:"linkedin.com/in/" site:linkedin.com'

# search via Google
url = "https://www.google.com"
driver.get(url)
time.sleep(2)

# accept cookies
try:
    WebDriverWait(driver,5).until(EC.element_to_be_clickable((By.ID, "L2AGLb"))).click()
    time.sleep(4)
except:
    pass

# send keystrokes of searchkey
textField = WebDriverWait(driver,10).until(EC.element_to_be_clickable((By.CLASS_NAME, "gLFyf")))
textField.send_keys(searchKey)
textField.send_keys(Keys.RETURN)

time.sleep(5)

# scroll to buttom
actions = ActionChains(driver)
actions.send_keys(Keys.END).perform()

# get employee names
urls = driver.find_elements(By.XPATH, "//a[@href]")
extractEmplName(urls)

googlePages = ["Page 2", "Page 3", "Page 4"]

for googlePage in googlePages:
    # browse to next page
    nextPage = driver.find_elements(By.XPATH, './/a[@class = "fl"]')
    
    try:
        for np in nextPage:
            label = np.get_attribute("aria-label")
            if (label == googlePage):
                np.click()
                break
        time.sleep(5)
    except Exception as e:
        print("Google - Error getting Page " + googlePage + " -- " + e)
    
    urls = driver.find_elements(By.XPATH, "//a[@href]")
    extractEmplName(urls)
    
# search via DuckDuckGo
url = "https://duckduckgo.com"
driver.get(url)
time.sleep(5)

# send keystrokes by getting element by id
textField = WebDriverWait(driver,10).until(EC.element_to_be_clickable((By.ID, "searchbox_input")))
textField.send_keys(searchKey)
textField.send_keys(Keys.RETURN)

time.sleep(5)

# send global keydown arrow
actions = ActionChains(driver)
actions.send_keys(Keys.END).perform()

counter = 0

# click "More Results" until all results are displayed
while True:
    counter = counter + 1
    # send global keydown arrow
    actions = ActionChains(driver)
    actions.send_keys(Keys.END).perform()

    try:
        nextPage = driver.find_elements(By.XPATH, './/div[@id = "rld-' + str(counter) + '"]')

        if not nextPage:
            break

        for np in nextPage:
            time.sleep(2)
            np.click()
            time.sleep(3)
            break
    except Exception as e:
        print("DuckDuckGo - Error getting Page " + duckPage + " -- " + e)

urls = driver.find_elements(By.XPATH, "//a[@href]")
extractEmplName(urls)

driver.close()

# print employee names
sortedEmployees = sorted(set(allEmployees))

for e in sortedEmployees:
    print(e)

